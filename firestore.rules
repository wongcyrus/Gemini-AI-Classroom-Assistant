rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isTeacher() {
      return request.auth != null && request.auth.token.role == 'teacher';
    }

    function isStudentInClass(classId) {
      return request.auth.uid in get(/databases/$(database)/documents/classes/$(classId)).data.studentUids;
    }

    match /studentProfiles/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    match /students/{studentUid} {
      allow read: if isTeacher();

      match /classes/{classId} {
        allow delete: if isTeacher();
      }

      match /messages/{messageId} {
        allow create: if isTeacher();
        allow read: if request.auth.uid == studentUid;
      }
    }

    match /classes/{classId} {
      allow read: if isTeacher() || (classId in get(/databases/$(database)/documents/studentProfiles/$(request.auth.uid)).data.classes);
      allow create: if isTeacher() &&
                    (classId == 'demo' ||
                     (request.resource.data.teachers is list &&
                      request.auth.token.email in request.resource.data.teachers &&
                      classId.size() >= 3));
      allow update, delete: if isTeacher();

      match /students/{studentId} {
        allow read: if isTeacher();
      }

      match /messages/{messageId} {
        allow create: if isTeacher();
        allow read: if isTeacher() || isStudentInClass(classId);
      }

      match /status/{studentUid} {
        allow read: if isTeacher() || isStudentInClass(classId);
        allow write: if isStudentInClass(classId) && request.auth.uid == studentUid;
      }

      match /metadata/{docId} {
        allow read: if isTeacher();
        allow write: if false; // Only backend functions can write
      }
    }

    match /screenshots/{screenshotId} {
        allow read: if isTeacher();
        allow create: if request.auth.uid == request.resource.data.studentUid && 
                         isStudentInClass(request.resource.data.classId);
        allow delete: if isTeacher();
    }

    match /prompts/{promptId} {
      allow read, write: if isTeacher();
    }

    match /irregularities/{irregularityId} {
      allow read: if isTeacher() || request.auth.uid == resource.data.studentUid;
      allow create: if isTeacher();
    }

    match /progress/{progressId} {
      allow read, create: if isTeacher();
    }

    match /performanceMetrics/{metricId} {
      allow read: if isTeacher();
    }

    match /videoJobs/{jobId} {
      allow create: if isTeacher();
      allow read: if isTeacher();
      allow delete: if isTeacher();
    }

    match /zipJobs/{jobId} {
      allow create: if isTeacher();
      allow read: if isTeacher();
      allow delete: if isTeacher();
    }

    match /videoAnalysisJobs/{jobId} {
      allow create: if isTeacher() && request.resource.data.requester == request.auth.uid;
      allow read: if isTeacher();
    }

    match /aiJobs/{jobId} {
      allow read, create: if isTeacher();
    }

    match /mails/{mailId} {
      allow read, update: if isTeacher() && request.auth.token.email == resource.data.to;
    }

    match /teachers/{teacherId} {
      allow read: if isTeacher() && request.auth.token.email == teacherId;

      match /messages/{messageId} {
        allow read: if isTeacher() && request.auth.token.email == teacherId;
        allow create: if isTeacher(); 
      }
    }

    match /notifications/{notificationId} {
      // Users can read and update (to mark as read) their own notifications.
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
      // Creation is handled by backend functions, so client-side creation is disallowed.
      allow create: if false;
    }
  }
}
